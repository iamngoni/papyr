name: Rust Core Release

on:
  push:
    tags:
      - 'core-v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/core-v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Papyr Core ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    name: Build (${{ matrix.os }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libpapyr_core.so
            asset_name: libpapyr_core-linux-x64.so
          
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: libpapyr_core.dylib
            asset_name: libpapyr_core-macos-x64.dylib
          
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: libpapyr_core.dylib
            asset_name: libpapyr_core-macos-arm64.dylib
          
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: papyr_core.dll
            asset_name: papyr_core-windows-x64.dll

    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install SANE (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libsane-dev
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        working-directory: papyr_core
      
      - name: Rename artifact
        run: |
          cd papyr_core/target/${{ matrix.target }}/release
          cp ${{ matrix.artifact_name }} ${{ matrix.asset_name }}
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: papyr_core/target/${{ matrix.target }}/release/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
      
      - name: Upload C Header
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: papyr_core/include/papyr_core.h
          asset_name: papyr_core.h
          asset_content_type: text/plain
